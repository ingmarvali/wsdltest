{
  "openapi": "3.0.1",
  "info": {
    "title": "Security Server Administration API",
    "description": "\n\nThe UXP Security ServerÂ® Administration API is used for setting up and managing your security server.\n\n**API is still in development and may change between releases. Compatibility between versions is not guaranteed.**\n\n**If you have any feedback, please do not hesitate to share it to your Cybernetica contacts or through the support portal.**\n\nRequests must be made over HTTPS and include a valid API key or JSON Web Token (JWT).\n\nFor more information about UXP Security Server, see the [UXP Security Server User Guide](./../../../docs/en/uxp-ug-ss_uxp_security_server_user_guide.html) (UXP-UG-SS) and the Installation Guide (UXP-IG-SS).\n\n## Authentication\n\nThere are two options for authenticated requests to the security server management API:\n* A JSON Web Token (JWT) must be included in the `Authorization` HTTP header (with `Bearer` authentication scheme). A valid JWT can be acquired by first authenticating with a valid username and password using the `/login` endpoint. A token is valid for three hours and must be reacquired afterwards.\n\n* A valid API key must be included in the `uxp-api-key` HTTP header of the request.\nIf both methods are present in the request, then authorization header will take precedence over an API key.\n### API Key Management\n\nAPI keys are managed using the API itself. Created API keys will be owned by the authenticated user. Only API keys that are owned by the authenticated user can be accessed, modified or deleted via the API.\n\nAPI key value will only be included in the initial response to the creation request and should be stored by the user for future use.\n\nRequests made using an API key have the same roles as the owner of the key.\n### Roles\nMost API endpoints have role based access restrictions. A user can have multiple roles and multiple users can have the same role. These roles are:\n* Server Administrator (SERVER_ADMIN)\n* Service Administrator (SERVICE_ADMIN)\n\nFor more information about the roles and their activities see the [UXP Security Server User Guide - User Roles](./../../../docs/en/uxp-ug-ss_uxp_security_server_user_guide.html#USEROL-6).\n## Client API requests\nThe client API endpoints must contain valid client identifier located in endpoints' path variable:\n\nClient identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).\n\nExample: `EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT`\n\nThe clients REST services API must additionally contain valid service identifier located in endpoints' path variable:\n\nAPI identifier encoded as {apiCode}[&{apiVersion}] (version is optional).\n\nExample: `exampleApiCode&v1`\n\nThe clients SOAP services API also must additionally contain valid service identifier located in endpoints' path variable:\n\nService identifier encoded as {serviceCode}[&{serviceVersion}] (version is optional).\n\nExample: `exampleServiceCode&v1`\n\n## HTTP Status Codes\n\nThe Security Server Administration API uses standard HTTP status codes in its responses.\n\n| **Code**  | **Description**  |\n|---|---|\n| 200  | Success  |\n| 201  | Success - new resource created  |\n| 204  | Success - no content returned  |\n| 302  | Redirect - HTTP was used but HTTPS is required  |\n| 400  | Failure - server cannot process request due to client input error  |\n| 401  | Failure - missing or invalid credentials  |\n| 404  | Failure - requested resource was not found |\n| 409 | Failure - request could not be processed due to server internal conflict, for example, viewing global configuration details requires that the configuration anchor has been uploaded |\n| 500 | Failure - internal server error |\n| 503 | Failure - service is unavailable, for example, the process has not yet started on the server |\n\nWherever possible, the response message includes more information about the cause of the error.\n\n",
    "contact": {
      "name": "Cybernetica AS",
      "url": "https://cyber.ee"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "security": [
    {
      "UXP-Security-Server-API-key": [
        
      ]
    },
    {
      "UXP-Security-Server-Bearer-JWT": [
        
      ]
    }
  ],
  "tags": [
    {
      "name": "License API",
      "description": "Manages the license of the server"
    },
    {
      "name": "Certificate profile API",
      "description": "Manages certificate profiles"
    },
    {
      "name": "Server API",
      "description": "Manages parameters and registration of the server"
    },
    {
      "name": "Client SOAP Service API",
      "description": "Manages the client's SOAP services"
    },
    {
      "name": "Device API",
      "description": "Manages signing devices"
    },
    {
      "name": "Key API",
      "description": "Manages signing and authentication keys"
    },
    {
      "name": "Device profile API",
      "description": "Provides information on supported device configuration profiles"
    },
    {
      "name": "Login API",
      "description": "Provides user authentication capabilities"
    },
    {
      "name": "API key API",
      "description": "Manages API keys owned by the authenticated user"
    },
    {
      "name": "Token API",
      "description": "Manages the security tokens"
    },
    {
      "name": "Client Internal Certificate API",
      "description": "Manages the client's internal certificates."
    },
    {
      "name": "Client Local Group API",
      "description": "Manages the client's local groups"
    },
    {
      "name": "Client WSDL API",
      "description": "Manages the client's WSDL files"
    },
    {
      "name": "Key API",
      "description": "Provides information on available keys"
    },
    {
      "name": "Client API",
      "description": "Manages the clients"
    },
    {
      "name": "Certificate API",
      "description": "Manages certificates"
    },
    {
      "name": "Owner API",
      "description": "Manages the security server owner"
    },
    {
      "name": "Global configuration API",
      "description": "Manages the global configuration"
    },
    {
      "name": "Client REST Service API",
      "description": "Manages the client's REST APIs"
    },
    {
      "name": "Owner API",
      "description": "Manages the security server owner's internal certificates"
    },
    {
      "name": "Timestamping service API",
      "description": "Manages the timestamping services"
    },
    {
      "name": "CSR API",
      "description": "Manages certificate signing requests (CSRs)"
    }
  ],
  "paths": {
    "/clients/{clientId}/soap-services/{serviceId}/http-headers/{name}": {
      "get": {
        "tags": [
          "Client SOAP Service API"
        ],
        "summary": "Returns details of a client's SOAP service HTTP header",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getHttpHeader",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service identifier encoded as {serviceCode}[&{serviceVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleServiceCode&v1"
          },
          {
            "name": "name",
            "in": "path",
            "description": "HTTP header name",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "example": "content-type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoapServiceHttpHeader"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Client SOAP Service API"
        ],
        "summary": "Add or modify SOAP service HTTP header",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "editHttpHeader",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service identifier encoded as {serviceCode}[&{serviceVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleServiceCode&v1"
          },
          {
            "name": "name",
            "in": "path",
            "description": "HTTP header name",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "pattern": "^[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "example": "content-type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditHttpHeaderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SOAP service HTTP header modified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoapServiceHttpHeader"
                }
              }
            }
          },
          "201": {
            "description": "SOAP service HTTP header added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoapServiceHttpHeader"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client SOAP Service API"
        ],
        "summary": "Delete a HTTP header from a client's SOAP service",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "deleteHttpHeader",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service identifier encoded as {serviceCode}[&{serviceVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleServiceCode&v1"
          },
          {
            "name": "name",
            "in": "path",
            "description": "HTTP header name",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "example": "content-type"
          }
        ],
        "responses": {
          "204": {
            "description": "SOAP service HTTP header deleted"
          }
        }
      }
    },
    "/clients/{clientId}/rest-apis/{apiId}/http-headers/{name}": {
      "get": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Returns details of a client's REST API HTTP header",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getHttpHeader_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          },
          {
            "name": "name",
            "in": "path",
            "description": "HTTP header name",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "example": "content-type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiHttpHeader"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Add or modify REST API HTTP header",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "editHttpHeader_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          },
          {
            "name": "name",
            "in": "path",
            "description": "HTTP header name",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "pattern": "^[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "example": "content-type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditHttpHeaderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "REST API HTTP header modified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiHttpHeader"
                }
              }
            }
          },
          "201": {
            "description": "REST API HTTP header added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiHttpHeader"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Delete a HTTP header from a client's REST API",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "deleteHttpHeader_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          },
          {
            "name": "name",
            "in": "path",
            "description": "HTTP header name",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z0-9_\\-]+$",
              "type": "string"
            },
            "example": "content-type"
          }
        ],
        "responses": {
          "204": {
            "description": "REST API HTTP header deleted"
          }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": [
          "Token API"
        ],
        "summary": "Lists all tokens",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getTokens",
        "responses": {
          "200": {
            "description": "Tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Token API"
        ],
        "summary": "Add token from a device",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "addToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the added token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}": {
      "get": {
        "tags": [
          "Token API"
        ],
        "summary": "Returns the details of a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>Software token has the tokenId <b>0</b>",
        "operationId": "getTokenDetails",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Token API"
        ],
        "summary": "Initializes or resets a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>The software token has the tokenId <b>0</b>.</br></br><b>IMPORTANT:</b> Resetting the token deletes all keys, CSRs and certificates stored on that token.",
        "operationId": "initializeToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenInitializationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token initialized or reset"
          }
        }
      },
      "delete": {
        "tags": [
          "Token API"
        ],
        "summary": "Deletes a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Token deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Token API"
        ],
        "summary": "Updates the details of a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>Software token has the tokenId <b>0</b>",
        "operationId": "updateTokenDetails",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token details updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/logout": {
      "post": {
        "tags": [
          "Token API"
        ],
        "summary": "Logs out of a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>The software token has the tokenId <b>0</b>.",
        "operationId": "logoutOfToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Logged out of the token"
          }
        }
      }
    },
    "/tokens/{tokenId}/login": {
      "post": {
        "tags": [
          "Token API"
        ],
        "summary": "Logs in to a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>Software token has the tokenId <b>0</b>",
        "operationId": "loginToToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenActivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Logged in to the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys": {
      "get": {
        "tags": [
          "Key API"
        ],
        "summary": "Returns all of the keys on a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>The optional query parameters can be used to filter which keys are returned. Only keys that match all used parameters are returned. If no query parameters are used, all keys on the token are returned.",
        "operationId": "getKeys",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter keys by identifier",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usage",
            "in": "query",
            "description": "Filter by key usage type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SIGNING",
                  "AUTHENTICATION",
                  "INTERNAL_AUTHENTICATION"
                ]
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "algorithm",
            "in": "query",
            "description": "Filter by algorithm",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Keys on the token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Key"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Key API"
        ],
        "summary": "Adds a new key to a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/><b>Required roles:</b> SERVER_ADMIN<br/><br/>Can generate a new key given generation parameters as JSON (`application/json`), or may import a pre-generated key from a PKCS12 key store given form data (`multipart/form-data`).",
        "operationId": "importKeyFromPkcs12_1",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "keyStore",
                  "keyUsage"
                ],
                "type": "object",
                "properties": {
                  "keyUsage": {
                    "type": "string",
                    "description": "Imported key certificate usage",
                    "enum": [
                      "SIGNING",
                      "AUTHENTICATION",
                      "INTERNAL_AUTHENTICATION"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "Imported key name"
                  },
                  "password": {
                    "type": "string",
                    "description": "Key store password",
                    "format": "password"
                  },
                  "alias": {
                    "type": "string",
                    "description": "Optional alias, specifying which key to import in case there are multiple keys in the key store"
                  },
                  "keyStore": {
                    "type": "string",
                    "description": "PKCS12 key store containing the key to import",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            }
          },
          "201": {
            "description": "Key added to the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/csrs": {
      "get": {
        "tags": [
          "CSR API"
        ],
        "summary": "Returns all CSRs on a key",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getCsrs",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          }
        ],
        "responses": {
          "200": {
            "description": "CSRs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Csr"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CSR API"
        ],
        "summary": "Generates a CSR for a key",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "generateCsr",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsrGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "CSR generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csr"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/certificates": {
      "get": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Returns all signing, authentication and internal authentication certificates on a key",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getAllCertificates",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certificate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Adds a self-signed certificate to a key",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "addSelfSignedCertificate",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSelfSignedCertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Generated self-signed certificate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/certificates/{certId}/unregister": {
      "post": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Unregisters a certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "unregisterCertificate",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "certId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          }
        ],
        "responses": {
          "204": {
            "description": "Certificate unregistered"
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/certificates/{certId}/register": {
      "post": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Registers a certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "registerCertificate",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "certId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertRegRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Certificate registered"
          }
        }
      }
    },
    "/timestamping-services": {
      "get": {
        "tags": [
          "Timestamping service API"
        ],
        "summary": "Returns the timestamping services used by the server",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getTimestampingServices",
        "responses": {
          "200": {
            "description": "Timestamping services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimestampingService"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Timestamping service API"
        ],
        "summary": "Adds a timestamping service used by server",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "addTimestampingService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTspRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Timestamping service added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampingService"
                }
              }
            }
          }
        }
      }
    },
    "/server/parameters": {
      "get": {
        "tags": [
          "Server API"
        ],
        "summary": "Returns the values of all server parameters",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getParameters",
        "responses": {
          "200": {
            "description": "Server parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerParameters"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Server API"
        ],
        "summary": "Sets the values of server parameters",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>You must include the name and value of the server parameters in the request body.",
        "operationId": "setParameters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Server parameter values set"
          }
        }
      }
    },
    "/server/parameters/{parameterName}": {
      "get": {
        "tags": [
          "Server API"
        ],
        "summary": "Returns the value of the given server parameter",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getParameter",
        "parameters": [
          {
            "name": "parameterName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SERVER_CODE",
                "PROXY_LISTEN_PORT"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server parameter",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Server API"
        ],
        "summary": "Sets the value of a server parameter",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>You must include the value of the server parameter in the request body.",
        "operationId": "setParameter",
        "parameters": [
          {
            "name": "parameterName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SERVER_CODE",
                "PROXY_LISTEN_PORT"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "pattern": "^[A-Za-z0-9_\\-]+$",
                "type": "string",
                "description": "Value of the server parameter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Server parameter value set"
          }
        }
      }
    },
    "/owner": {
      "get": {
        "tags": [
          "Owner API"
        ],
        "summary": "Returns the security server owner details",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getOwner",
        "responses": {
          "200": {
            "description": "Security server owner details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Owner"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Owner API"
        ],
        "summary": "Sets the security server owner",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>You must add the instance code, member class and member code of the new owner to the request body",
        "operationId": "setOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Security server owner set"
          }
        }
      }
    },
    "/owner/internal-certificates": {
      "get": {
        "tags": [
          "Owner API"
        ],
        "summary": "Returns all internal certificates belonging to the owner",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getAllInternalCertificates",
        "responses": {
          "200": {
            "description": "Internal certificates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnerInternalCertificate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Owner API"
        ],
        "summary": "Adds a new internal certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "addInternalCertificate",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "Internal certificate bytes (DER/PEM)",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Internal certificate added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerInternalCertificate"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Login API"
        ],
        "summary": "Authenticates the user in the request",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/license": {
      "get": {
        "tags": [
          "License API"
        ],
        "summary": "Downloads the license",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "downloadLicense",
        "responses": {
          "200": {
            "description": "License file successfully downloaded",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "License API"
        ],
        "summary": "Uploads the license",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "uploadLicense",
        "parameters": [
          {
            "name": "dryRun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether this request should avoid persistent side-effects",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "licenseFile"
                ],
                "type": "object",
                "properties": {
                  "licenseFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "License upload preview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/License"
                }
              }
            }
          },
          "201": {
            "description": "License uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/License"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "License API"
        ],
        "summary": "Deletes the license",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteLicense",
        "responses": {
          "204": {
            "description": "License deleted"
          }
        }
      }
    },
    "/globalconf/anchor": {
      "get": {
        "tags": [
          "Global configuration API"
        ],
        "summary": "Downloads the global configuration anchor file",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getGlobalConfAnchorFile",
        "responses": {
          "200": {
            "description": "Global configuration file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Global configuration API"
        ],
        "summary": "Uploads a global configuration anchor file",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "uploadGlobalConfAnchor",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "confAnchor"
                ],
                "type": "object",
                "properties": {
                  "confAnchor": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Global configuration anchor file uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnchorFile"
                }
              }
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "tags": [
          "Device API"
        ],
        "summary": "Lists all device configurations",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getDevices",
        "responses": {
          "200": {
            "description": "Device configurations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Device"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Device API"
        ],
        "summary": "Adds a new device configuration",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "addDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Device configuration added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          }
        }
      }
    },
    "/clients": {
      "get": {
        "tags": [
          "Client API"
        ],
        "summary": "Returns all clients",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/><br/>The optional query parameters can be used to filter which clients are returned. Only clients that match all used parameters are returned. If no query parameters are used, all clients are returned.",
        "operationId": "getClients",
        "parameters": [
          {
            "name": "instance",
            "in": "query",
            "description": "Filter clients by instance identifier",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberClass",
            "in": "query",
            "description": "Filter clients by member class",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberCode",
            "in": "query",
            "description": "Filter clients by member code",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "subsystemCode",
            "in": "query",
            "description": "Filter clients by subsystem code",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter clients by registration status",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SAVED",
                  "REGINPROG",
                  "REGISTERED",
                  "DELINPROG",
                  "GLOBALERR"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client API"
        ],
        "summary": "Adds a new client",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>You must include the member class, member code and subsystem code of the new client in the request body.",
        "operationId": "addClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Client added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/wsdls": {
      "get": {
        "tags": [
          "Client WSDL API"
        ],
        "summary": "Lists all client's WSDLs",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getWsdls",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter WSDLs by id",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter WSDLs by URL",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "disabledNotice",
            "in": "query",
            "description": "Filter WSDLs by disabled notice",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "disabled",
            "in": "query",
            "description": "Filter WSDLs by status",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wsdl"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client WSDL API"
        ],
        "summary": "Add WSDL and contained services to a client",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "addWsdl",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "allowedInlinedImportDepth",
            "in": "query",
            "description": "UXP requires imports to be inlined for compatibility reasons. <br><br>Sets the limit on recursive inline imports. <b>0</b> denotes that inlining will <b>not</b> be performed.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "description": "Whether this request should avoid persistent side-effects",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWsdlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WSDL preview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wsdl"
                }
              }
            }
          },
          "201": {
            "description": "WSDL added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wsdl"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/unregister": {
      "post": {
        "tags": [
          "Client API"
        ],
        "summary": "Unregisters a client",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "unregisterClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "responses": {
          "204": {
            "description": "Client unregistered"
          }
        }
      }
    },
    "/clients/{clientId}/rest-apis": {
      "get": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Lists all client's REST APIs",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getRestApis",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "baseUrl",
            "in": "query",
            "description": "Filter REST APIs by base URL",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "serviceCode",
            "in": "query",
            "description": "Filter REST APIs by service code",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "serviceVersion",
            "in": "query",
            "description": "Filter REST APIs by service version",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "openApiDescriptionUrl",
            "in": "query",
            "description": "Filter REST APIs by OpenAPI description URL",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "disabledNotice",
            "in": "query",
            "description": "Filter REST APIs by disabled notice",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "disabled",
            "in": "query",
            "description": "Filter REST APIs by status",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "tlsEnabled",
            "in": "query",
            "description": "Filter REST APIs by TLS verification status",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestApi"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Adds new REST API",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/><br/>Must contain base URL, service code and optional service version of the new REST API in the request body.",
        "operationId": "addRestApi",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "dryRun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether this request should avoid persistent side-effects",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRestApiRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "REST API preview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApi"
                }
              }
            }
          },
          "201": {
            "description": "REST API added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApi"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/rest-apis/{apiId}/endpoints": {
      "get": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Lists a client's REST API's endpoints",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getRestApiEndpoints",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Endpoint"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Adds an endpoint to a client's REST API",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/><br/>Must contain the new endpoint's path in the request body.",
        "operationId": "addEndpoint",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddEndpointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "REST API endpoint created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/register": {
      "post": {
        "tags": [
          "Client API"
        ],
        "summary": "Registers a client",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "registerClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "responses": {
          "204": {
            "description": "Client registered"
          }
        }
      }
    },
    "/clients/{clientId}/local-groups": {
      "get": {
        "tags": [
          "Client Local Group API"
        ],
        "summary": "Returns all local groups belonging to a client",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getLocalGroups",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "responses": {
          "200": {
            "description": "Local groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocalGroup"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client Local Group API"
        ],
        "summary": "Adds a new local group",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "addLocalGroup",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLocalGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Local group added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalGroup"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/internal-certificates": {
      "get": {
        "tags": [
          "Client Internal Certificate API"
        ],
        "summary": "Returns all internal certificates belonging to a client",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getAllInternalCertificates_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "responses": {
          "200": {
            "description": "Internal certificates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientInternalCertificate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client Internal Certificate API"
        ],
        "summary": "Adds a new internal certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "addInternalCertificate_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "Internal certificate bytes (DER/PEM)",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Internal certificate added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInternalCertificate"
                }
              }
            }
          }
        }
      }
    },
    "/certificates": {
      "get": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Returns all signing, authentication and internal authentication certificates",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/><br/>The optional query parameters can be used to filter which certificates are returned. Only certificates that match all used parameters are returned. If no query parameters are used, all certificates are returned.",
        "operationId": "getAllCertificates_1",
        "parameters": [
          {
            "name": "tokenId",
            "in": "query",
            "description": "Filter certificates belonging to a certain token.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "keyId",
            "in": "query",
            "description": "Filter certificates belonging to a certain key",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter certificates by certificate id",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberInstance",
            "in": "query",
            "description": "Filter certificates by member instance identifier of the certificate owner",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberClass",
            "in": "query",
            "description": "Filter certificates by member class of the certificate owner",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberCode",
            "in": "query",
            "description": "Filter certificates by member code of the certificate owner",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filter certificates by status",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter certificates by registration status",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SAVED",
                  "REGINPROG",
                  "REGISTERED",
                  "DELINPROG",
                  "GLOBALERR"
                ]
              }
            }
          },
          {
            "name": "usage",
            "in": "query",
            "description": "Filter certificates by usage type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SIGNING",
                  "AUTHENTICATION",
                  "INTERNAL_AUTHENTICATION"
                ]
              }
            }
          },
          {
            "name": "serialNumber",
            "in": "query",
            "description": "Filter certificates by serial number",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ocspStatus",
            "in": "query",
            "description": "Filter certificates by OCSP status",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "GOOD",
                  "REVOKED",
                  "UNKNOWN",
                  "SUSPENDED",
                  "OUTDATED"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certificate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Imports a certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>Certificate file can be in DER or PEM format.",
        "operationId": "importCertificate",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "Certificate bytes (DER/PEM)",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Certificate imported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          }
        }
      }
    },
    "/api-keys": {
      "get": {
        "tags": [
          "API key API"
        ],
        "summary": "Returns API keys owned by the user",
        "operationId": "getApiKeys",
        "responses": {
          "200": {
            "description": "All user's API keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "API key API"
        ],
        "summary": "Adds a new API key owned by the user",
        "operationId": "addApiKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "API key created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}": {
      "get": {
        "tags": [
          "Key API"
        ],
        "summary": "Returns information for a key on a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getKey",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          }
        ],
        "responses": {
          "200": {
            "description": "Key information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Key API"
        ],
        "summary": "Deletes a key on a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/><b>IMPORTANT:</b> All certificates on the key are also deleted.",
        "operationId": "deleteKey",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fromDevice",
            "in": "query",
            "description": "Whether to delete the key from the physical token device, if false then key is deleted from security server configuration only",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Key deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Key API"
        ],
        "summary": "Updates the information of a key on a token",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "updateKey",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Key modified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/certificates/{certId}": {
      "get": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Returns information about a certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getCertificateDetails",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "certId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Deletes a certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteCertificate",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "certId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Certificate deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Activates or deactivates a certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>To activate the certificate, you must set the value of `active` in the request body to `true`. To deactivate the certificate, you must set the value to `false`",
        "operationId": "changeCertificateStatus",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "certId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCertStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Certificate status changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          }
        }
      }
    },
    "/devices/{deviceId}": {
      "get": {
        "tags": [
          "Device API"
        ],
        "summary": "Returns a device configuration",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A device configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Device API"
        ],
        "summary": "Deletes a device configuration",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Device configuration deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Device API"
        ],
        "summary": "Edits a device configuration",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "editDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Device configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}": {
      "get": {
        "tags": [
          "Client API"
        ],
        "summary": "Returns information about a client",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "responses": {
          "200": {
            "description": "Client information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client API"
        ],
        "summary": "Deletes a client",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "responses": {
          "204": {
            "description": "Client deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Client API"
        ],
        "summary": "Changes client's connection type",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/><br/>The possible connection types are `NOSSL`, `SSLNOAUTH` and `SSLAUTH`. With `NOSSL` and `SSLNOAUTH` the security server will not verify the source of incoming requests. Additionally, with `NOSSL` the connection is not encrypted. These settings should be used with caution.",
        "operationId": "changeClientConnectionType",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeClientConnectionTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Client connection type changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/wsdls/{wsdlId}": {
      "get": {
        "tags": [
          "Client WSDL API"
        ],
        "summary": "Returns details of a client's WSDL",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getWsdl",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "wsdlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wsdl"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client WSDL API"
        ],
        "summary": "Deletes a client's WSDL",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "deleteWsdl",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "wsdlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "WSDL deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Client WSDL API"
        ],
        "summary": "Edit parameters of a client's WSDL",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "editWsdl",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "wsdlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          },
          {
            "name": "allowedInlinedImportDepth",
            "in": "query",
            "description": "UXP requires imports to be inlined for compatibility reasons. <br><br>Sets the limit on recursive inline imports. <b>0</b> denotes that inlining will <b>not</b> be performed.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "description": "Whether this request should avoid persistent side-effects",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditWsdlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WSDL updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wsdl"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/soap-services/{serviceId}": {
      "get": {
        "tags": [
          "Client SOAP Service API"
        ],
        "summary": "Returns details of a client's SOAP service",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getSoapService",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service identifier encoded as {serviceCode}[&{serviceVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleServiceCode&v1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoapService"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Client SOAP Service API"
        ],
        "summary": "Edit parameters and access rights of a client's SOAP service",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "editSoapService",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service identifier encoded as {serviceCode}[&{serviceVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleServiceCode&v1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSoapServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SoapService"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/rest-apis/{apiId}": {
      "get": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Returns details of a client's REST API",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getRestApi",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApi"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Deletes a client's REST API",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "deleteRestApi",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          }
        ],
        "responses": {
          "204": {
            "description": "REST API deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Edit parameters of a client's REST API",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/><br/>Must contain parameter values to be edited in the request body. All parameters are optional and only updated in case they are present in the request body.",
        "operationId": "editRestApi",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          },
          {
            "name": "dryRun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether this request should avoid persistent side-effects",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditRestApiRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated REST API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApi"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/rest-apis/{apiId}/endpoints/{endpointId}": {
      "get": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Returns details of a client's REST API endpoint",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getRestApiEndpoint",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          },
          {
            "name": "endpointId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Delete an endpoint from a client's REST API",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "deleteEndpoint",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          },
          {
            "name": "endpointId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 42
          }
        ],
        "responses": {
          "204": {
            "description": "REST API endpoint deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Edit access rights of a client's REST API endpoint",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/><br/>Must contain subjects' information and REST verbs to be allowed to use with the REST API endpoints in the request body.",
        "operationId": "editRestApiEndpoint",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          },
          {
            "name": "endpointId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 42
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditEndpointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/local-groups/{groupCode}": {
      "get": {
        "tags": [
          "Client Local Group API"
        ],
        "summary": "Returns information about a client's local group",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getLocalGroupDetails",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "groupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "LGRP1"
          }
        ],
        "responses": {
          "200": {
            "description": "Local group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client Local Group API"
        ],
        "summary": "Deletes a client's local group",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "deleteLocalGroup",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "groupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "LGRP1"
          }
        ],
        "responses": {
          "204": {
            "description": "Local group deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "Client Local Group API"
        ],
        "summary": "Modifies the local group's description and membership",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "modifyLocalGroup",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "groupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "LGRP1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyLocalGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Modified local group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api-keys/{hash}": {
      "get": {
        "tags": [
          "API key API"
        ],
        "summary": "Returns information about an API key owned by the user",
        "operationId": "getApiKey",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "acf1773da1330eef8760e12aedbd2b0e8e1e56d4da609ccb2ca97692ca669c62"
          }
        ],
        "responses": {
          "200": {
            "description": "API key information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "API key API"
        ],
        "summary": "Removes an API key owned by the user",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "acf1773da1330eef8760e12aedbd2b0e8e1e56d4da609ccb2ca97692ca669c62"
          }
        ],
        "responses": {
          "204": {
            "description": "API key removed"
          }
        }
      },
      "patch": {
        "tags": [
          "API key API"
        ],
        "summary": "Edits an API key owned by the user",
        "operationId": "editApiKey",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "acf1773da1330eef8760e12aedbd2b0e8e1e56d4da609ccb2ca97692ca669c62"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Edited API key information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/status": {
      "get": {
        "tags": [
          "Token API"
        ],
        "summary": "Returns token status",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>Software token has the tokenId <b>0</b>",
        "operationId": "tokenStatus",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Token status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/csrs/{csrId}": {
      "get": {
        "tags": [
          "CSR API"
        ],
        "summary": "Returns the information for a CSR",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getCsrsDetails",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "csrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "7E5AD0F19806E46E808F191BEE676FE3318AF128"
          }
        ],
        "responses": {
          "200": {
            "description": "CSR information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csr"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CSR API"
        ],
        "summary": "Deletes a CSR from a key",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteCsr",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "csrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "7E5AD0F19806E46E808F191BEE676FE3318AF128"
          }
        ],
        "responses": {
          "204": {
            "description": "CSR deleted"
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/csrs/{csrId}/download": {
      "get": {
        "tags": [
          "CSR API"
        ],
        "summary": "Downloads a CSR file",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "downloadCsr",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "csrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "7E5AD0F19806E46E808F191BEE676FE3318AF128"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PEM",
              "enum": [
                "PEM",
                "DER"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CSR file",
            "content": {
              "application/x-pem-file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/pkcs10": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/keys/{keyId}/certificates/{certId}/download": {
      "get": {
        "tags": [
          "Certificate API"
        ],
        "summary": "Downloads a certificate file",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getCertificate",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          {
            "name": "certId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PEM",
              "enum": [
                "PEM",
                "DER"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate file",
            "content": {
              "application/x-pem-file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/pkix-cert": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}/available-keys": {
      "get": {
        "tags": [
          "Key API"
        ],
        "summary": "Returns information on keys available on a token. Not all listed keys have necessarily been added to token configuration",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getAvailableKeys",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Available keys on the token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/timestamping-services/{name}": {
      "get": {
        "tags": [
          "Timestamping service API"
        ],
        "summary": "Returns information about a timestamping service used by the server",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getTimestampingService",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Timestamping service 2"
          }
        ],
        "responses": {
          "200": {
            "description": "Timestamping service information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampingService"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Timestamping service API"
        ],
        "summary": "Removes a timestamping service from the server",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteTimestampingService",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Timestamping service 2"
          }
        ],
        "responses": {
          "204": {
            "description": "Timestamping service removed from the server"
          }
        }
      }
    },
    "/server/version": {
      "get": {
        "tags": [
          "Server API"
        ],
        "summary": "Returns the server package versions",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageVersions"
                }
              }
            }
          }
        }
      }
    },
    "/server/status": {
      "get": {
        "tags": [
          "Server API"
        ],
        "summary": "Returns the server status",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Server status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerStatus"
                }
              }
            }
          }
        }
      }
    },
    "/server/info": {
      "get": {
        "tags": [
          "Server API"
        ],
        "summary": "Returns public server info",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Server info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerInfo"
                }
              }
            }
          }
        }
      }
    },
    "/owner/sign-csrs": {
      "get": {
        "tags": [
          "Owner API"
        ],
        "summary": "Returns the signing certificate CSRs of the security server owner",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getSigningCsrs",
        "responses": {
          "200": {
            "description": "Signing CSRs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Csr"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/owner/sign-certificates": {
      "get": {
        "tags": [
          "Owner API"
        ],
        "summary": "Returns the signing certificates of the security server owner",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getSigningCertificates",
        "responses": {
          "200": {
            "description": "Signing certificates of the security server owner:",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certificate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/owner/internal-certificates/{certHash}": {
      "get": {
        "tags": [
          "Owner API"
        ],
        "summary": "Returns information about an internal certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getInternalCertificateDetails",
        "parameters": [
          {
            "name": "certHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          }
        ],
        "responses": {
          "200": {
            "description": "Internal certificate information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerInternalCertificate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Owner API"
        ],
        "summary": "Deletes an internal certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "deleteInternalCertificate",
        "parameters": [
          {
            "name": "certHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          }
        ],
        "responses": {
          "204": {
            "description": "Internal certificate deleted"
          }
        }
      }
    },
    "/owner/internal-certificates/{certHash}/download": {
      "get": {
        "tags": [
          "Owner API"
        ],
        "summary": "Downloads an internal certificate file",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getInternalCertificate",
        "parameters": [
          {
            "name": "certHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PEM",
              "enum": [
                "PEM",
                "DER"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Internal certificate file",
            "content": {
              "application/x-pem-file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/pkix-cert": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/license/details": {
      "get": {
        "tags": [
          "License API"
        ],
        "summary": "Returns the details of the license",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getLicenseDetails",
        "responses": {
          "200": {
            "description": "License details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/License"
                }
              }
            }
          }
        }
      }
    },
    "/globalconf": {
      "get": {
        "tags": [
          "Global configuration API"
        ],
        "summary": "Returns the details of the global configuration",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getGlobalConfDetails",
        "responses": {
          "200": {
            "description": "Global configuration details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConf"
                }
              }
            }
          }
        }
      }
    },
    "/globalconf/timestamping-services": {
      "get": {
        "tags": [
          "Global configuration API",
          "Timestamping service API"
        ],
        "summary": "Returns all approved timestamping services",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getTimestampingServices_1",
        "responses": {
          "200": {
            "description": "Approved timestamping services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimestampingService"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/globalconf/certification-services": {
      "get": {
        "tags": [
          "Global configuration API"
        ],
        "summary": "Returns all approved certification services",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getCertificationServices",
        "responses": {
          "200": {
            "description": "Approved certification services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertificationServices"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/globalconf/anchor/details": {
      "get": {
        "tags": [
          "Global configuration API"
        ],
        "summary": "Returns the details of the global configuration anchor",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getGlobalConfAnchorDetails",
        "responses": {
          "200": {
            "description": "Global configuration anchor details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnchorFile"
                }
              }
            }
          }
        }
      }
    },
    "/device-profiles": {
      "get": {
        "tags": [
          "Device profile API"
        ],
        "summary": "Returns all supported device profiles",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getDeviceProfiles",
        "responses": {
          "200": {
            "description": "All supported device profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceProfile"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/device-profiles/{type}": {
      "get": {
        "tags": [
          "Device profile API"
        ],
        "summary": "Returns device profile information necessary for configuring a device of a specific supported type",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getDeviceProfile",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pkcs11"
          }
        ],
        "responses": {
          "200": {
            "description": "Device profile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceProfile"
                }
              }
            }
          }
        }
      }
    },
    "/csrs": {
      "get": {
        "tags": [
          "CSR API"
        ],
        "summary": "Returns all signing and authentication certificate CSRs",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/><br/>The optional query parameters can be used to filter which CSRs are returned. Only CSRs that match all used parameters are returned. If no query parameters are used, all CSRs are returned.",
        "operationId": "getAllCsrs",
        "parameters": [
          {
            "name": "tokenId",
            "in": "query",
            "description": "Filter CSRs belonging to a certain token",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "keyId",
            "in": "query",
            "description": "Filter CSRs belonging to a certain key",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter CSRs by id",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberInstance",
            "in": "query",
            "description": "Filter CSRs by instance identifier of the CSR owner",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberClass",
            "in": "query",
            "description": "Filter CSRs by member class of the CSR owner",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "memberCode",
            "in": "query",
            "description": "Filter CSRs by member code of the CSR owner",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "subjectName",
            "in": "query",
            "description": "Filter CSRs by subject name",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usage",
            "in": "query",
            "description": "Filter CSRs by key usage.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SIGNING",
                  "AUTHENTICATION",
                  "INTERNAL_AUTHENTICATION"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CSRs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Csr"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/soap-services": {
      "get": {
        "tags": [
          "Client SOAP Service API"
        ],
        "summary": "Lists all client's SOAP services",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getSoapServices",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SoapService"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/soap-services/{serviceId}/http-headers": {
      "get": {
        "tags": [
          "Client SOAP Service API"
        ],
        "summary": "Lists a client's SOAP service HTTP headers",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getHttpHeaders",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service identifier encoded as {serviceCode}[&{serviceVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleServiceCode&v1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SoapServiceHttpHeader"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/rest-apis/{apiId}/http-headers": {
      "get": {
        "tags": [
          "Client REST Service API"
        ],
        "summary": "Lists a client's REST API HTTP headers",
        "description": "<b>Required roles:</b> SERVICE_ADMIN<br/>",
        "operationId": "getHttpHeaders_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "apiId",
            "in": "path",
            "description": "API identifier encoded as {apiCode}[&{apiVersion}] (version is optional).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleApiCode&v1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestApiHttpHeader"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}/internal-certificates/{certHash}": {
      "get": {
        "tags": [
          "Client Internal Certificate API"
        ],
        "summary": "Returns information about an internal certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getInternalCertificateDetails_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "certHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          }
        ],
        "responses": {
          "200": {
            "description": "Internal certificate information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInternalCertificate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client Internal Certificate API"
        ],
        "summary": "Deletes an internal certificate",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "deleteInternalCertificate_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "certHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          }
        ],
        "responses": {
          "204": {
            "description": "Internal certificate deleted"
          }
        }
      }
    },
    "/clients/{clientId}/internal-certificates/{certHash}/download": {
      "get": {
        "tags": [
          "Client Internal Certificate API"
        ],
        "summary": "Downloads an internal certificate file",
        "description": "<b>Required roles:</b> SERVER_ADMIN, SERVICE_ADMIN<br/>",
        "operationId": "getInternalCertificate_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client identifier encoded as {instanceCode}&{memberClass}&{memberCode}&{subsystemCode} (all parts are required).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT"
          },
          {
            "name": "certHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PEM",
              "enum": [
                "PEM",
                "DER"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Internal certificate file",
            "content": {
              "application/x-pem-file": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/pkix-cert": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/certificate-profile": {
      "get": {
        "tags": [
          "Certificate profile API"
        ],
        "summary": "Returns certificate profile information necessary for generating CSRs",
        "description": "<b>Required roles:</b> SERVER_ADMIN<br/>",
        "operationId": "getCertificateProfile",
        "parameters": [
          {
            "name": "caName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyUsage",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SIGNING",
                "AUTHENTICATION",
                "INTERNAL_AUTHENTICATION"
              ]
            }
          },
          {
            "name": "instance",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberClass",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate profile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateProfileInfo"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EditHttpHeaderRequest": {
        "required": [
          "action",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "HTTP header value",
            "example": "text/plain"
          },
          "action": {
            "type": "string",
            "enum": [
              "USE_THIS",
              "USE_OTHER"
            ]
          }
        }
      },
      "SoapServiceHttpHeader": {
        "required": [
          "action",
          "href",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "HTTP header name",
            "example": "content-type"
          },
          "value": {
            "type": "string",
            "description": "HTTP header value",
            "example": "text/plain"
          },
          "action": {
            "type": "string",
            "enum": [
              "USE_THIS",
              "USE_OTHER"
            ]
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/soap-services/exampleServiceCode&v1/http-headers/content-type"
          }
        }
      },
      "RestApiHttpHeader": {
        "required": [
          "action",
          "href",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "HTTP header name",
            "example": "content-type"
          },
          "value": {
            "type": "string",
            "description": "HTTP header value",
            "example": "text/plain"
          },
          "action": {
            "type": "string",
            "enum": [
              "USE_THIS",
              "USE_OTHER"
            ]
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/rest-apis/exampleServiceCode&v1/http-headers/content-type"
          }
        }
      },
      "TokenAddRequest": {
        "required": [
          "alias",
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "My Token"
          },
          "alias": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "mytoken"
          }
        }
      },
      "Certificate": {
        "required": [
          "expiresAt",
          "href",
          "id",
          "isActive",
          "issuedAt",
          "issuerName",
          "key",
          "serialNumber",
          "subjectName",
          "usage"
        ],
        "type": "object",
        "properties": {
          "subjectName": {
            "type": "string",
            "example": "C=EE_DEV, O=COM, CN=Example Organization"
          },
          "issuerName": {
            "type": "string",
            "example": "C=EE, O=Cybernetica AS, OU=UXP Dev, CN=UXP ECC Class3 CA"
          },
          "serialNumber": {
            "type": "string",
            "example": "372832261889437900"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-25T13:31:28.911Z"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-25T13:31:28.911Z"
          },
          "hash": {
            "type": "string",
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          },
          "key": {
            "$ref": "#/components/schemas/KeyReference"
          },
          "id": {
            "type": "string",
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          },
          "href": {
            "type": "string",
            "example": "/tokens/0/keys/8343CB7326FB3EE286CABCB1DCDD3701B720767B/certificates/FF38B7C2A222B3FC8301316319749F95CFFCBE7E/"
          },
          "memberId": {
            "$ref": "#/components/schemas/MemberId"
          },
          "usage": {
            "type": "string",
            "enum": [
              "SIGNING",
              "AUTHENTICATION",
              "INTERNAL_AUTHENTICATION"
            ]
          },
          "ocspStatus": {
            "type": "string",
            "enum": [
              "GOOD",
              "REVOKED",
              "UNKNOWN",
              "SUSPENDED",
              "OUTDATED"
            ]
          },
          "isActive": {
            "type": "boolean"
          },
          "keyName": {
            "type": "string",
            "example": "Example Organization SS1 signing key 1"
          },
          "keyAvailable": {
            "type": "boolean"
          },
          "registrationStatus": {
            "type": "string",
            "enum": [
              "SAVED",
              "REGINPROG",
              "REGISTERED",
              "DELINPROG",
              "GLOBALERR"
            ]
          }
        }
      },
      "Csr": {
        "required": [
          "href",
          "id",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/KeyReference"
          },
          "id": {
            "type": "string",
            "example": "7E5AD0F19806E46E808F191BEE676FE3318AF128"
          },
          "href": {
            "type": "string",
            "example": "/tokens/0/keys/8343CB7326FB3EE286CABCB1DCDD3701B720767B/csrs/7E5AD0F19806E46E808F191BEE676FE3318AF128/"
          },
          "memberId": {
            "$ref": "#/components/schemas/MemberId"
          },
          "usage": {
            "type": "string",
            "enum": [
              "SIGNING",
              "AUTHENTICATION",
              "INTERNAL_AUTHENTICATION"
            ]
          },
          "subjectCommonName": {
            "type": "string",
            "example": "C=EE_DEV, O=COM, CN=Example Organization"
          }
        }
      },
      "DeviceReference": {
        "required": [
          "href",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "href": {
            "type": "string",
            "example": "/devices/1234"
          }
        }
      },
      "Key": {
        "required": [
          "algorithm",
          "href",
          "id",
          "token",
          "usage"
        ],
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/TokenReference"
          },
          "id": {
            "type": "string",
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          "href": {
            "type": "string",
            "example": "/tokens/0/keys/8343CB7326FB3EE286CABCB1DCDD3701B720767B/"
          },
          "usage": {
            "type": "string",
            "enum": [
              "SIGNING",
              "AUTHENTICATION",
              "INTERNAL_AUTHENTICATION"
            ]
          },
          "name": {
            "type": "string",
            "example": "Example Organization SS1 signing key 1"
          },
          "algorithm": {
            "type": "string",
            "example": "EC"
          },
          "isAvailable": {
            "type": "boolean"
          },
          "certificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          },
          "csrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Csr"
            }
          }
        }
      },
      "KeyReference": {
        "required": [
          "href",
          "id",
          "token"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          "href": {
            "type": "string",
            "example": "/tokens/0/keys/8343CB7326FB3EE286CABCB1DCDD3701B720767B/"
          },
          "token": {
            "$ref": "#/components/schemas/TokenReference"
          }
        }
      },
      "MemberId": {
        "required": [
          "instance",
          "memberClass",
          "memberCode"
        ],
        "type": "object",
        "properties": {
          "instance": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EE_DEV"
          },
          "memberClass": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "GOV"
          },
          "memberCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EXAMPLE_ORGANIZATION"
          }
        }
      },
      "SupportedAlgorithms": {
        "type": "object",
        "properties": {
          "authentication": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RSA_2048",
                "RSA_3072",
                "RSA_4096",
                "EC_P256",
                "EC_P384",
                "EC_P521"
              ]
            }
          },
          "signing": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RSA_2048",
                "RSA_3072",
                "RSA_4096",
                "EC_P256",
                "EC_P384",
                "EC_P521"
              ]
            }
          }
        }
      },
      "Token": {
        "required": [
          "href",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0"
          },
          "href": {
            "type": "string",
            "example": "/tokens/0/"
          },
          "device": {
            "$ref": "#/components/schemas/DeviceReference"
          },
          "name": {
            "type": "string",
            "example": "Software token"
          },
          "type": {
            "type": "string",
            "example": "softToken"
          },
          "status": {
            "type": "string",
            "enum": [
              "USER_PIN_LOCKED",
              "USER_PIN_INCORRECT",
              "USER_PIN_EXPIRED",
              "USER_PIN_COUNT_LOW",
              "USER_PIN_FINAL_TRY",
              "NOT_INITIALIZED",
              "UNKNOWN",
              "LOGGED_IN",
              "LOGGED_OUT"
            ]
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "supportedAlgorithms": {
            "$ref": "#/components/schemas/SupportedAlgorithms"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Key"
            }
          }
        }
      },
      "TokenReference": {
        "required": [
          "href",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0"
          },
          "href": {
            "type": "string",
            "example": "/tokens/0"
          }
        }
      },
      "TokenInitializationRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "format": "password"
          },
          "resetToken": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "TokenActivationRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "TokenStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "USER_PIN_LOCKED",
              "USER_PIN_INCORRECT",
              "USER_PIN_EXPIRED",
              "USER_PIN_COUNT_LOW",
              "USER_PIN_FINAL_TRY",
              "NOT_INITIALIZED",
              "UNKNOWN",
              "LOGGED_IN",
              "LOGGED_OUT"
            ]
          }
        }
      },
      "KeyGenerationRequest": {
        "required": [
          "algorithm"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "signing key"
          },
          "algorithm": {
            "type": "string",
            "enum": [
              "RSA_2048",
              "RSA_3072",
              "RSA_4096",
              "EC_P256",
              "EC_P384",
              "EC_P521"
            ]
          }
        }
      },
      "CsrGenerationRequest": {
        "required": [
          "certificationServiceName",
          "keyUsage"
        ],
        "type": "object",
        "properties": {
          "keyUsage": {
            "type": "string",
            "enum": [
              "SIGNING",
              "AUTHENTICATION",
              "INTERNAL_AUTHENTICATION"
            ]
          },
          "certificationServiceName": {
            "type": "string",
            "example": "Certificate authority 1"
          },
          "memberId": {
            "$ref": "#/components/schemas/MemberId"
          },
          "subjectFieldValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AddSelfSignedCertRequest": {
        "required": [
          "keyUsage"
        ],
        "type": "object",
        "properties": {
          "keyUsage": {
            "type": "string",
            "example": "INTERNAL_AUTHENTICATION",
            "enum": [
              "SIGNING",
              "AUTHENTICATION",
              "INTERNAL_AUTHENTICATION"
            ]
          },
          "subjectFieldValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"CN\":\"SS.example.com\"}"
            },
            "example": {
              "CN": "SS.example.com"
            }
          }
        }
      },
      "CertRegRequest": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "ss.example.com"
          }
        }
      },
      "AddTspRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Timestamping service 2"
          }
        },
        "description": "Timestamping service name"
      },
      "TimestampingService": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "TSA_NAME_1"
          },
          "url": {
            "type": "string",
            "example": "http://www.example.com"
          }
        },
        "description": "Timestamping service"
      },
      "ServerParameters": {
        "type": "object",
        "properties": {
          "SERVER_CODE": {
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "SS"
          },
          "PROXY_LISTEN_PORT": {
            "type": "string",
            "example": "5500"
          }
        },
        "description": "Server parameter map"
      },
      "OwnerInternalCertificate": {
        "required": [
          "expiresAt",
          "issuedAt",
          "issuerName",
          "serialNumber",
          "subjectName"
        ],
        "type": "object",
        "properties": {
          "subjectName": {
            "type": "string",
            "example": "C=EE_DEV, O=COM, CN=Example Organization"
          },
          "issuerName": {
            "type": "string",
            "example": "C=EE, O=Cybernetica AS, OU=UXP Dev, CN=UXP ECC Class3 CA"
          },
          "serialNumber": {
            "type": "string",
            "example": "372832261889437900"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-25T13:31:28.911Z"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-25T13:31:28.911Z"
          },
          "hash": {
            "type": "string",
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          },
          "href": {
            "type": "string",
            "example": "/owner/internal-certificates/9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1/"
          }
        }
      },
      "LoginRequest": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LoginResponse": {
        "required": [
          "accessToken",
          "expiresAt",
          "roles",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "roles": {
            "type": "array",
            "example": [
              "uxp-service-administrator",
              "uxp-server-administrator"
            ],
            "items": {
              "type": "string",
              "example": "[\"uxp-service-administrator\",\"uxp-server-administrator\"]"
            }
          },
          "accessToken": {
            "type": "string",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTYzNjIyMTc1NiwiaWF0IjoxNjM2MjE4MTU2fQ.FRAt_--_gcpoIUNig8ZLOZyYUJCslAJnJg8eVa0402k"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Alert": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": [
          
        ]
      },
      "License": {
        "required": [
          "licenseNumber",
          "maxClients",
          "validUntil"
        ],
        "type": "object",
        "properties": {
          "licenseNumber": {
            "type": "string",
            "example": "1234-4567-8901-2345"
          },
          "licenseHolder": {
            "type": "string",
            "example": "Example Co"
          },
          "validUntil": {
            "type": "string",
            "example": "2035-10-25"
          },
          "licensedOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicensedOwner"
            }
          },
          "cloudProvider": {
            "type": "string",
            "example": "Microsoft Azure"
          },
          "cloudOffers": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "azure-uxp-security-server"
            }
          },
          "maxClients": {
            "type": "string",
            "example": "5"
          },
          "alerts": {
            "type": "array",
            "example": [
              
            ],
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "LicensedOwner": {
        "required": [
          "instances"
        ],
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "example": "EE_DEV",
            "items": {
              "type": "string",
              "example": "EE_DEV"
            }
          },
          "memberClass": {
            "type": "string",
            "example": "GOV"
          },
          "memberCode": {
            "type": "string",
            "example": "EXAMPLE_OWNER"
          }
        }
      },
      "AnchorFile": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "4CECC17CDC8B2F38CF42D3375B9BD4572552D62FE46DF2DBADBFEAC6"
          },
          "instance": {
            "type": "string",
            "example": "EE_DEV"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-09-28T13:31:28.911Z"
          }
        }
      },
      "AddDeviceRequest": {
        "required": [
          "conf",
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "pkcs11"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "Test device"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "Device for testing"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Initial device status. Tokens from disabled devices are unavailable for use.",
            "example": true,
            "default": false
          },
          "isBatchSigningSupported": {
            "type": "boolean",
            "description": "Signing keys on tokens from devices with batch signing support can create batch signatures.",
            "example": true,
            "default": false
          },
          "conf": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Device": {
        "required": [
          "availableTokens",
          "conf",
          "description",
          "href",
          "id",
          "isBatchSigningSupported",
          "isDisabled",
          "name",
          "type",
          "updatedDate"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "example": "/devices/testDevice/"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Test device"
          },
          "description": {
            "type": "string",
            "example": "Device for testing"
          },
          "type": {
            "type": "string",
            "example": "pkcs11"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isBatchSigningSupported": {
            "type": "boolean"
          },
          "conf": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "availableTokens": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddClientRequest": {
        "required": [
          "memberClass",
          "memberCode",
          "subsystemCode"
        ],
        "type": "object",
        "properties": {
          "memberClass": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "GOV"
          },
          "memberCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EXAMPLE_ORGANIZATION"
          },
          "subsystemCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EXAMPLE_DEPARTMENT"
          }
        }
      },
      "Client": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/SubsystemId"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/"
          },
          "status": {
            "type": "string",
            "enum": [
              "SAVED",
              "REGINPROG",
              "REGISTERED",
              "DELINPROG",
              "GLOBALERR"
            ]
          },
          "connectionType": {
            "type": "string",
            "enum": [
              "NOSSL",
              "SSLNOAUTH",
              "SSLAUTH"
            ]
          },
          "name": {
            "type": "string",
            "example": "Example Department"
          },
          "soapServiceCount": {
            "type": "integer",
            "format": "int32"
          },
          "restApiCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SubsystemId": {
        "required": [
          "instance",
          "memberClass",
          "memberCode",
          "subsystemCode"
        ],
        "type": "object",
        "properties": {
          "instance": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EE_DEV"
          },
          "memberClass": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "GOV"
          },
          "memberCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EXAMPLE_ORGANIZATION"
          },
          "subsystemCode": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "EXAMPLE_DEPARTMENT"
          }
        }
      },
      "AddWsdlRequest": {
        "required": [
          "wsdlUrl"
        ],
        "type": "object",
        "properties": {
          "wsdlUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL of the WSDL file.",
            "example": "https://example.com/services.wsdl"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Sets the initial status of the WSDL file. Disabled WSDL file's services can not be used.",
            "example": true,
            "default": true
          },
          "disabledNotice": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Notice that will be displayed when the WSDL is disabled.",
            "example": "Out of order",
            "default": "Out of order"
          }
        }
      },
      "ClientReference": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/SubsystemId"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/"
          }
        }
      },
      "ServiceId": {
        "required": [
          "serviceCode"
        ],
        "type": "object",
        "properties": {
          "serviceCode": {
            "type": "string",
            "example": "exampleServiceCode"
          },
          "serviceVersion": {
            "type": "string",
            "example": "v1"
          }
        }
      },
      "Wsdl": {
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/ClientReference"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/wsdls/1"
          },
          "refreshedDate": {
            "type": "string",
            "format": "date-time"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "disabledNotice": {
            "type": "string",
            "example": "Out of order"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/services.wsdl"
          },
          "alerts": {
            "type": "array",
            "example": [
              
            ],
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          },
          "diff": {
            "$ref": "#/components/schemas/WsdlUpdateDiff"
          }
        }
      },
      "WsdlUpdateDiff": {
        "type": "object",
        "properties": {
          "addedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceId"
            }
          },
          "removedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceId"
            }
          },
          "unsupportedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceId"
            }
          },
          "inlinedImportUrls": {
            "type": "array",
            "example": [
              "https://example.com/import.wsdl"
            ],
            "items": {
              "type": "string",
              "example": "[\"https://example.com/import.wsdl\"]"
            }
          }
        }
      },
      "AddOrEditOpenApiRequest": {
        "type": "object",
        "properties": {
          "descriptionUrl": {
            "type": "string",
            "example": "https://url-to-openapi-description/"
          }
        }
      },
      "AddRestApiRequest": {
        "required": [
          "serviceCode"
        ],
        "type": "object",
        "properties": {
          "serviceCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "exampleServiceCode"
          },
          "serviceVersion": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "v1"
          },
          "baseUrl": {
            "type": "string",
            "example": "https://example.com"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Sets the initial status of the REST API. Disabled REST APIs can not be used.",
            "default": true
          },
          "disabledNotice": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Notice that will be displayed when the REST API is disabled.",
            "example": "Out of order",
            "default": "Out of order"
          },
          "openApi": {
            "$ref": "#/components/schemas/AddOrEditOpenApiRequest"
          }
        }
      },
      "AccessRightSubject": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "SUBSYSTEM",
            "enum": [
              "SUBSYSTEM",
              "LOCALGROUP",
              "GLOBALGROUP"
            ]
          },
          "instance": {
            "type": "string",
            "example": "EE_DEV"
          },
          "memberClass": {
            "type": "string",
            "example": "GOV"
          },
          "memberCode": {
            "type": "string",
            "example": "EXAMPLE_ORGANIZATION"
          },
          "subsystemCode": {
            "type": "string",
            "example": "EXAMPLE_DEPARTMENT"
          },
          "groupCode": {
            "type": "string",
            "example": "LRP1"
          }
        }
      },
      "Endpoint": {
        "required": [
          "accessRights",
          "addedDate",
          "href",
          "id",
          "isGenerated",
          "path"
        ],
        "type": "object",
        "properties": {
          "restApi": {
            "$ref": "#/components/schemas/RestApiReference"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/rest-apis/exampleServiceCode&v1/endpoints/42"
          },
          "id": {
            "type": "string",
            "example": "42"
          },
          "path": {
            "type": "string",
            "example": "/examplePath"
          },
          "addedDate": {
            "type": "string",
            "format": "date-time"
          },
          "isGenerated": {
            "type": "boolean"
          },
          "accessRights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointAccessRight"
            }
          }
        }
      },
      "EndpointAccessRight": {
        "required": [
          "allowedVerbs",
          "subject"
        ],
        "type": "object",
        "properties": {
          "subject": {
            "$ref": "#/components/schemas/AccessRightSubject"
          },
          "allowedVerbs": {
            "uniqueItems": true,
            "type": "array",
            "example": [
              "HEAD",
              "GET",
              "POST"
            ],
            "items": {
              "type": "string",
              "example": "[\"HEAD\",\"GET\",\"POST\"]",
              "enum": [
                "HEAD",
                "GET",
                "POST",
                "PUT",
                "PATCH",
                "DELETE"
              ]
            }
          }
        }
      },
      "OpenApi": {
        "type": "object",
        "properties": {
          "descriptionUrl": {
            "type": "string",
            "example": "https://url-to-openapi-description/"
          },
          "refreshedDate": {
            "type": "string",
            "format": "date-time"
          },
          "baseUrls": {
            "type": "array",
            "example": [
              "https://openapi-base-url/"
            ],
            "items": {
              "type": "string",
              "example": "[\"https://openapi-base-url/\"]"
            }
          }
        }
      },
      "RestApi": {
        "required": [
          "addedDate",
          "baseUrl",
          "disabledNotice",
          "endpoints",
          "href",
          "httpHeaders",
          "isDisabled",
          "isTlsEnabled",
          "serviceCode",
          "serviceVersion",
          "timeout"
        ],
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/ClientReference"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/rest-apis/exampleServiceCode&v1"
          },
          "baseUrl": {
            "type": "string",
            "example": "https://example.com/"
          },
          "serviceCode": {
            "type": "string",
            "example": "exampleServiceCode"
          },
          "serviceVersion": {
            "type": "string",
            "example": "v1"
          },
          "addedDate": {
            "type": "string",
            "format": "date-time"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "disabledNotice": {
            "type": "string",
            "example": "This REST API is disabled."
          },
          "isTlsEnabled": {
            "type": "boolean"
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "example": 60
          },
          "openApi": {
            "$ref": "#/components/schemas/OpenApi"
          },
          "diff": {
            "$ref": "#/components/schemas/RestApiUpdateDiff"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "httpHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApiHttpHeader"
            }
          }
        }
      },
      "RestApiReference": {
        "type": "object",
        "properties": {
          "serviceCode": {
            "type": "string",
            "example": "exampleServiceCode"
          },
          "serviceVersion": {
            "type": "string",
            "example": "v1"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/rest-apis/exampleServiceCode&v1"
          },
          "client": {
            "$ref": "#/components/schemas/ClientReference"
          }
        }
      },
      "RestApiUpdateDiff": {
        "type": "object",
        "properties": {
          "addedEndpoints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removedEndpoints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "addedBaseUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removedBaseUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddEndpointRequest": {
        "required": [
          "path"
        ],
        "type": "object",
        "properties": {
          "path": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "/apiPath"
          }
        }
      },
      "AddLocalGroupRequest": {
        "required": [
          "description",
          "groupCode"
        ],
        "type": "object",
        "properties": {
          "groupCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "LGRP1"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "Local group one"
          }
        }
      },
      "LocalGroup": {
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/ClientReference"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/local-groups/LGRP1"
          },
          "groupCode": {
            "type": "string",
            "example": "LGRP1"
          },
          "description": {
            "type": "string",
            "example": "Example local group"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalGroupMember"
            }
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LocalGroupMember": {
        "type": "object",
        "properties": {
          "subsystemId": {
            "$ref": "#/components/schemas/SubsystemId"
          },
          "name": {
            "type": "string",
            "example": "Example Department"
          },
          "addedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ClientInternalCertificate": {
        "required": [
          "expiresAt",
          "issuedAt",
          "issuerName",
          "serialNumber",
          "subjectName"
        ],
        "type": "object",
        "properties": {
          "subjectName": {
            "type": "string",
            "example": "C=EE_DEV, O=COM, CN=Example Organization"
          },
          "issuerName": {
            "type": "string",
            "example": "C=EE, O=Cybernetica AS, OU=UXP Dev, CN=UXP ECC Class3 CA"
          },
          "serialNumber": {
            "type": "string",
            "example": "372832261889437900"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-25T13:31:28.911Z"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-25T13:31:28.911Z"
          },
          "hash": {
            "type": "string",
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          },
          "client": {
            "$ref": "#/components/schemas/ClientReference"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/internal-certificates/9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1/"
          }
        }
      },
      "AddApiKeyRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "my api key"
          }
        }
      },
      "ApiKey": {
        "required": [
          "addedDate",
          "hash",
          "href",
          "owner",
          "status"
        ],
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "acf1773da1330eef8760e12aedbd2b0e8e1e56d4da609ccb2ca97692ca669c62"
          },
          "href": {
            "type": "string",
            "example": "/api-keys/acf1773da1330eef8760e12aedbd2b0e8e1e56d4da609ccb2ca97692ca669c62"
          },
          "value": {
            "type": "string",
            "example": "69f993ef-2650-446a-a176-7b629c91d365"
          },
          "owner": {
            "type": "string",
            "example": "admin"
          },
          "description": {
            "type": "string",
            "example": "my api key"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "REVOKED"
            ]
          },
          "addedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TokenUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "My token"
          }
        }
      },
      "KeyUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "Example Organization SS2 auth key 1"
          }
        }
      },
      "ChangeCertStatusRequest": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "description": "Certificate status"
      },
      "EditDeviceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "Test device"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "Device for testing"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Tokens from disabled devices are unavailable for use.",
            "example": true
          },
          "isBatchSigningSupported": {
            "type": "boolean",
            "description": "Signing keys on tokens from devices with batch signing support can create batch signatures.",
            "example": true
          },
          "conf": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ChangeClientConnectionTypeRequest": {
        "required": [
          "connectionType"
        ],
        "type": "object",
        "properties": {
          "connectionType": {
            "type": "string",
            "enum": [
              "NOSSL",
              "SSLNOAUTH",
              "SSLAUTH"
            ]
          }
        },
        "description": "Client connection type"
      },
      "EditWsdlRequest": {
        "type": "object",
        "properties": {
          "wsdlUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL of the WSDL file.",
            "example": "https://example.com/services.wsdl"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Sets the initial status of the WSDL file. Disabled WSDL file's services can not be used.",
            "example": true
          },
          "disabledNotice": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Notice that will be displayed when the WSDL is disabled.",
            "example": "Out of order"
          }
        }
      },
      "EditSoapServiceRequest": {
        "type": "object",
        "properties": {
          "serviceUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "https://example.com/"
          },
          "timeout": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "example": 60
          },
          "isTlsEnabled": {
            "type": "boolean",
            "example": false
          },
          "accessRights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRightSubject"
            }
          }
        }
      },
      "SoapService": {
        "required": [
          "accessRights",
          "href",
          "httpHeaders",
          "isTlsEnabled",
          "serviceCode",
          "serviceUrl",
          "timeout",
          "wsdl"
        ],
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/ClientReference"
          },
          "wsdl": {
            "$ref": "#/components/schemas/WsdlReference"
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/soap-services/exampleServiceCode&v1"
          },
          "title": {
            "type": "string",
            "example": "Example SOAP service"
          },
          "serviceUrl": {
            "type": "string",
            "example": "https://example.com/"
          },
          "serviceCode": {
            "type": "string",
            "example": "exampleServiceCode"
          },
          "serviceVersion": {
            "type": "string",
            "example": "v1"
          },
          "isTlsEnabled": {
            "type": "boolean"
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "example": 60
          },
          "httpHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoapServiceHttpHeader"
            }
          },
          "accessRights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRightSubject"
            }
          }
        }
      },
      "WsdlReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "href": {
            "type": "string",
            "example": "/clients/EE_DEV&GOV&EXAMPLE_ORGANIZATION&EXAMPLE_DEPARTMENT/wsdls/1"
          }
        }
      },
      "EditRestApiRequest": {
        "type": "object",
        "properties": {
          "baseUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "https://example.com/"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Sets the initial status of the REST API. Disabled REST APIs can not be used."
          },
          "disabledNotice": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Notice that will be displayed when the REST API is disabled.",
            "example": "Out of order",
            "default": "Out of order"
          },
          "isTlsEnabled": {
            "type": "boolean"
          },
          "timeout": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "example": 60
          },
          "openApi": {
            "$ref": "#/components/schemas/AddOrEditOpenApiRequest"
          }
        }
      },
      "EditEndpointRequest": {
        "type": "object",
        "properties": {
          "accessRights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointAccessRight"
            }
          }
        }
      },
      "LocalGroupMembershipRequest": {
        "type": "object",
        "properties": {
          "subsystemId": {
            "$ref": "#/components/schemas/SubsystemId"
          }
        }
      },
      "ModifyLocalGroupRequest": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "Local group one"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalGroupMembershipRequest"
            }
          }
        }
      },
      "EditApiKeyRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "my api key"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "REVOKED"
            ]
          }
        }
      },
      "AvailableCertificate": {
        "required": [
          "alias",
          "expiresAt",
          "issuedAt",
          "issuerName",
          "serialNumber",
          "subjectName"
        ],
        "type": "object",
        "properties": {
          "subjectName": {
            "type": "string",
            "example": "C=EE_DEV, O=COM, CN=Example Organization"
          },
          "issuerName": {
            "type": "string",
            "example": "C=EE, O=Cybernetica AS, OU=UXP Dev, CN=UXP ECC Class3 CA"
          },
          "serialNumber": {
            "type": "string",
            "example": "372832261889437900"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-25T13:31:28.911Z"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-25T13:31:28.911Z"
          },
          "hash": {
            "type": "string",
            "example": "9A31952BD84124B3041DAC5F68EEF4ECAC2C44B1"
          },
          "alias": {
            "type": "string",
            "example": "FF38B7C2A222B3FC8301316319749F95CFFCBE7E"
          }
        }
      },
      "AvailableKey": {
        "required": [
          "algorithm",
          "alias",
          "availableCertificates"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "example": "8343CB7326FB3EE286CABCB1DCDD3701B720767B"
          },
          "name": {
            "type": "string",
            "example": "ecc-p384"
          },
          "algorithm": {
            "type": "string",
            "example": "EC"
          },
          "availableCertificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableCertificate"
            }
          }
        }
      },
      "PackageVersions": {
        "required": [
          "packageVersions"
        ],
        "type": "object",
        "properties": {
          "packageVersions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"uxp-addon-metaservices\":\"1.15.1\",\"uxp-addon-monitor\":\"1.15.1\",\"uxp-confclient\":\"1.15.1\",\"uxp-jetty\":\"1.15.1\",\"uxp-proxy\":\"1.15.1\",\"uxp-securityserver\":\"1.15.1\",\"uxp-signer\":\"1.15.1\"}"
            },
            "example": {
              "uxp-addon-metaservices": "1.15.1",
              "uxp-addon-monitor": "1.15.1",
              "uxp-confclient": "1.15.1",
              "uxp-jetty": "1.15.1",
              "uxp-proxy": "1.15.1",
              "uxp-securityserver": "1.15.1",
              "uxp-signer": "1.15.1"
            }
          }
        }
      },
      "LicenseInfo": {
        "type": "object",
        "properties": {
          "maxClients": {
            "type": "string",
            "example": "5"
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "ServerStatus": {
        "required": [
          "licenseInfo"
        ],
        "type": "object",
        "properties": {
          "registered": {
            "type": "boolean"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          },
          "licenseInfo": {
            "$ref": "#/components/schemas/LicenseInfo"
          }
        }
      },
      "ServerInfo": {
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/MemberId"
          },
          "ownerName": {
            "type": "string",
            "example": "SS Owner"
          },
          "code": {
            "type": "string",
            "example": "SS"
          }
        }
      },
      "Owner": {
        "required": [
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/MemberId"
          },
          "name": {
            "type": "string",
            "example": "Example Department"
          }
        }
      },
      "GlobalConf": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "VALID",
            "enum": [
              "VALID",
              "INVALID",
              "ANCHOR_MISSING"
            ]
          },
          "instanceCode": {
            "type": "string",
            "example": "EE_DEV"
          },
          "memberClasses": {
            "uniqueItems": true,
            "type": "array",
            "example": [
              "COM",
              "GOV",
              "NGO"
            ],
            "items": {
              "type": "string",
              "example": "[\"COM\",\"GOV\",\"NGO\"]"
            }
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegisteredMember"
            }
          },
          "subsystems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegisteredSubsystem"
            }
          },
          "globalGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlobalGroup"
            }
          }
        }
      },
      "GlobalGroup": {
        "type": "object",
        "properties": {
          "instance": {
            "type": "string",
            "example": "EE_DEV"
          },
          "groupCode": {
            "type": "string",
            "example": "GGRP1"
          },
          "description": {
            "type": "string",
            "example": "Example global group"
          }
        }
      },
      "RegisteredMember": {
        "required": [
          "instance",
          "memberClass",
          "memberCode"
        ],
        "type": "object",
        "properties": {
          "instance": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EE_DEV"
          },
          "memberClass": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "GOV"
          },
          "memberCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EXAMPLE_ORGANIZATION"
          },
          "name": {
            "type": "string",
            "example": "Member name"
          }
        }
      },
      "RegisteredSubsystem": {
        "required": [
          "instance",
          "memberClass",
          "memberCode",
          "subsystemCode"
        ],
        "type": "object",
        "properties": {
          "instance": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EE_DEV"
          },
          "memberClass": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "GOV"
          },
          "memberCode": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9_\\-]+$",
            "type": "string",
            "example": "EXAMPLE_ORGANIZATION"
          },
          "subsystemCode": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "EXAMPLE_DEPARTMENT"
          },
          "name": {
            "type": "string",
            "example": "Member name"
          }
        }
      },
      "CertificationServices": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Certificate Authority 1"
          },
          "supportedKeyTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SIGNING",
                "AUTHENTICATION",
                "INTERNAL_AUTHENTICATION"
              ]
            }
          }
        },
        "description": "Certification service"
      },
      "DeviceProfile": {
        "required": [
          "settings",
          "templates",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "pkcs11"
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceSetting"
            }
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceProfileTemplate"
            }
          }
        }
      },
      "DeviceProfileTemplate": {
        "required": [
          "description",
          "id",
          "name",
          "values"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "cloudHSM"
          },
          "name": {
            "type": "string",
            "example": "AWS CloudHSM"
          },
          "description": {
            "type": "string",
            "example": "Cloud-based hardware security module on the AWS Cloud"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "example": {
                "library": "/opt/cloudhsm/lib/libcloudhsm_pkcs11.so"
              }
            },
            "example": {
              "library": "/opt/cloudhsm/lib/libcloudhsm_pkcs11.so"
            }
          }
        }
      },
      "DeviceSetting": {
        "required": [
          "description",
          "isAdvanced",
          "isNotEmpty",
          "isRequired",
          "isUnique",
          "key",
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "library"
          },
          "label": {
            "type": "string",
            "example": "Library path"
          },
          "description": {
            "type": "string",
            "example": "The path to the pkcs#11 library of the device driver."
          },
          "defaultValue": {
            "type": "string",
            "example": "CKM_RSA_PKCS"
          },
          "isAdvanced": {
            "type": "boolean",
            "example": false
          },
          "isRequired": {
            "type": "boolean",
            "example": true
          },
          "isUnique": {
            "type": "boolean",
            "example": false
          },
          "isNotEmpty": {
            "type": "boolean",
            "example": true
          },
          "type": {
            "type": "string",
            "enum": [
              "STRING",
              "BOOLEAN",
              "LIST_SELECTION",
              "SINGLE_SELECTION"
            ]
          },
          "options": {
            "type": "array",
            "description": "List of potential selections for list/single selection setting types",
            "example": [
              "CKM_RSA_PKCS",
              "CKM_RSA_PKCS_PSS"
            ],
            "items": {
              "type": "string",
              "description": "List of potential selections for list/single selection setting types",
              "example": "[\"CKM_RSA_PKCS\",\"CKM_RSA_PKCS_PSS\"]"
            }
          }
        }
      },
      "CertificateProfileInfo": {
        "type": "object",
        "properties": {
          "subjectFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificateSubjectDescription"
            }
          }
        }
      },
      "CertificateSubjectDescription": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "O"
          },
          "label": {
            "type": "string",
            "example": "Organization (O)"
          },
          "defaultValue": {
            "type": "string",
            "example": "Cybernetica AS"
          },
          "isReadOnly": {
            "type": "boolean",
            "example": false
          },
          "isRequired": {
            "type": "boolean",
            "example": true
          }
        }
      }
    },
    "securitySchemes": {
      "UXP-Security-Server-API-key": {
        "type": "apiKey",
        "name": "uxp-api-key",
        "in": "header"
      },
      "UXP-Security-Server-Bearer-JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
