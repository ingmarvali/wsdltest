{
  "openapi": "3.0.0",
  "x-stoplight": {
    "id": "6f1syzijynu40"
  },
  "info": {
    "title": "Identity Provider",
    "version": "1.0",
    "description": "Abbreviations:\n\nOIDC - Open ID Connect\n\nIdP - Identity provider\n\nPMP - Partner Management portal\n\nKYC - Know Your Customer\n\nIDA - Authentication server",
    "license": {
      "name": "MPL-2.0"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/authorize": {
      "get": {
        "summary": "Authorization Endpoint",
        "operationId": "get-authorize",
        "description": "This URL lands enduser to IdP single page JS application. UI is rendered based on the provided display request parameter.\n\nOn load of the page IdP UI echoes all the authorize request parameters to oauth-details endpoint for server-sdie validation.\n\nAuthentication & authroization : None",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "openid profile",
              "enum": [
                "openid profile",
                "openid",
                "profile",
                "email",
                "address",
                "phone",
                "offline_access"
              ]
            },
            "in": "query",
            "name": "scope",
            "description": "Secifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the openid scope value.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            },
            "in": "query",
            "name": "response_type",
            "description": "Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 256
            },
            "in": "query",
            "name": "client_id",
            "required": true,
            "description": "OAuth 2.0 Client Identifier valid at the Authorization Server"
          },
          {
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "in": "query",
            "name": "redirect_uri",
            "description": "Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 256
            },
            "in": "query",
            "description": "Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.",
            "name": "state"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token.",
            "name": "nonce"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "page",
                "popup",
                "touch",
                "wap"
              ]
            },
            "in": "query",
            "name": "display",
            "description": "ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "login",
                "consent",
                "select_account"
              ],
              "example": "consent"
            },
            "in": "query",
            "name": "prompt",
            "description": "Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "max_age",
            "description": "Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ui_locales",
            "description": "End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "acr_values",
            "description": "Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "claims_locales",
            "description": "End-User's preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "claims",
            "description": "This parameter is used to request that specific Claims be returned. The value is a JSON object listing the requested Claims. The claims parameter value is represented in an OAuth 2.0 request as UTF-8 encoded JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\nLoads JS application, and validates the provided query parameters using oauth-details endpoint."
          }
        },
        "tags": [
          "OAuth"
        ]
      },
      "parameters": []
    },
    "/oauth/token": {
      "post": {
        "summary": "Token Endpoint",
        "operationId": "post-token",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id_token": {
                      "type": "string",
                      "description": "Identity token."
                    },
                    "access_token": {
                      "type": "string",
                      "description": "The access token. The token that will be used to call the UserInfo endpoint."
                    },
                    "token_type": {
                      "type": "string",
                      "default": "Bearer",
                      "enum": [
                        "Bearer"
                      ],
                      "description": "The type of the access token, set to Bearer"
                    },
                    "expires_in": {
                      "type": "number",
                      "format": "duration",
                      "description": "The lifetime of the access token, in seconds."
                    }
                  },
                  "required": [
                    "id_token",
                    "access_token",
                    "token_type",
                    "expires_in"
                  ]
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-store"
                  ]
                }
              },
              "Pragma": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-cache"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code."
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Optional text providing additional information about the error that occurred."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        },
        "description": "Client invokes this Token endpoint with authorization code to get ID and access token.\n\n1. The only supported client authentication methods : <b>private_key_jwt</b>\n2. clientAssertion is a signed JWT with Clients private key, corresponding public key should be shared with IDP during the client registration process.\n3. clientAssertion JWT payload must be as below: \n\nThe JWT MUST contain the following REQUIRED Claim Values and MAY contain the following OPTIONAL Claim Values:\n\n<b>iss</b>\n\nREQUIRED. Issuer. This MUST contain the client_id of the OAuth Client.\n\n<b>sub</b>\n\nREQUIRED. Subject. This MUST contain the client_id of the OAuth Client.\n\n<b>aud</b>\n\nREQUIRED. Audience. The aud (audience) Claim. Value that identifies the Authorization Server as an intended audience. The Authorization Server MUST verify that it is an intended audience for the token. The Audience SHOULD be the URL of the Authorization Server's Token Endpoint.\n\n<b>jti</b>\n\nREQUIRED. JWT ID. A unique identifier for the token, which can be used to prevent reuse of the token. These tokens MUST only be used once, unless conditions for reuse were negotiated between the parties; any such negotiation is beyond the scope of this specification.\n\n<b>exp</b>\n\nREQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n\n<b>iat</b>\n\nOPTIONAL. Time at which the JWT was issued.\n\n\nThe JWT MAY contain other Claims. Any Claims used that are not understood MUST be ignored.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "authorization_code"
                    ],
                    "description": "Authorization code grant type."
                  },
                  "code": {
                    "type": "string",
                    "description": "Authorization code, sent as query param in the client's redirect URI."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "Client Id of the OIDC client."
                  },
                  "client_assertion_type": {
                    "type": "string",
                    "enum": [
                      "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                    ],
                    "description": "Type of the client assertion part of this request."
                  },
                  "client_assertion": {
                    "type": "string",
                    "description": "Private key signed JWT, This JWT payload structure is defined above as part of request description."
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Valid client redirect_uri. Must be same as the one sent in the authorize call."
                  }
                },
                "required": [
                  "grant_type",
                  "code",
                  "client_id",
                  "client_assertion_type",
                  "client_assertion",
                  "redirect_uri"
                ]
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "description": "Authorization code grant type.",
                    "enum": [
                      "authorization_code"
                    ]
                  },
                  "code": {
                    "type": "string",
                    "description": "Authorization code, sent as query param in the client's redirect URI."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "Client Id of the OIDC client."
                  },
                  "client_assertion_type": {
                    "type": "string",
                    "enum": [
                      "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                    ],
                    "description": "Type of the client assertion part of this request."
                  },
                  "client_assertion": {
                    "type": "string",
                    "description": "Private key signed JWT, This JWT payload structure is defined above as part of request description."
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Valid client redirect_uri. Must be same as the one sent in the authorize call."
                  }
                },
                "required": [
                  "grant_type",
                  "code",
                  "client_id",
                  "client_assertion_type",
                  "client_assertion",
                  "redirect_uri"
                ]
              }
            }
          }
        },
        "tags": [
          "OAuth"
        ]
      },
      "parameters": []
    },
    "/oidc/userinfo": {
      "get": {
        "summary": "UserInfo Endpoint",
        "tags": [
          "OIDC"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/jwt": {
                "schema": {
                  "type": "string",
                  "format": "jwt",
                  "description": "The response is signed and then encrypted, with the result being a Nested JWT. Signed using IDA server's private key. Signed full JWT will then be encrypted using OIDC client's public key."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "WWW-AUTHENTICATE": {
                "schema": {
                  "type": "string"
                },
                "description": "Bearer error=invalid_token,  error_description=MOSIPIDP123: A userinfo request was made with an access token that was not recognized."
              }
            }
          }
        },
        "operationId": "get-userinfo",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "Bearer <access token as received in token endpoint response>"
            },
            "in": "header",
            "name": "Authorization",
            "description": "Need to have the Bearer access token,Must start with word Bearer.",
            "required": true
          }
        ],
        "description": "The UserInfo Endpoint returns Claims about the authenticated End-User. To obtain the requested Claims about the End-User, the Client makes a request to the UserInfo Endpoint using an Access Token obtained through IDP. \n\nThese Claims are normally represented by a JSON object that contains a collection of name and value pairs for the Claims.\n\n\nEg 1: Client requested claims \n\nname : { \"essential\" : true }\nphone: { \"essential\" : true }\n\nResponse 1: Enduser provided his/her consent to both name and phone. Response will look as below:\n\n{ \"name\" : \"xyz\", \"phone\" : \"033456743\" }\n\nResonse 2: Enduser provided his/her consent to only name. Response will look as below:\n\n{ \"name\" : \"xyz\" }\n\nResponse 3: Claims requested with  claims_locales : \"en fr\"\n\n{ \"name#en\" : \"xyz\", \"name#fr\" : \"xyz in french\", \"phone\" : \"033456743\" } "
      },
      "parameters": []
    },
    "/.well-known/openid-configuration": {
      "get": {
        "summary": "Configuration Endpoint",
        "tags": [
          "OIDC"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string",
                      "description": "URL using the https scheme with no query or fragment component that the RP asserts as its Issuer Identifier.This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer."
                    },
                    "authorization_endpoint": {
                      "type": "string",
                      "description": "URL of the OAuth 2.0 Authorization Endpoint."
                    },
                    "token_endpoint": {
                      "type": "string",
                      "description": "URL of the OAuth 2.0 Token Endpoint."
                    },
                    "jwks_uri": {
                      "type": "string",
                      "description": "URL of the OP's JSON Web Key Set [JWK] document. "
                    },
                    "registration_endpoint": {
                      "type": "string",
                      "description": "URL of Client Registration Endpoint."
                    },
                    "scopes_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.",
                      "enum": [
                        "openid"
                      ]
                    },
                    "response_types_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.",
                      "enum": [
                        "code"
                      ]
                    },
                    "acr_values_supported": {
                      "type": "string",
                      "description": " JSON array containing a list of the Authentication Context Class References that IDP supports."
                    },
                    "userinfo_signing_alg_values_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of the JWS [JWS] signing algorithms."
                    },
                    "userinfo_encryption_alg_values_supported": {
                      "type": "string",
                      "description": "SON array containing a list of the JWE [JWE] encryption algorithms."
                    },
                    "userinfo_encryption_enc_values_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT."
                    },
                    "token_endpoint_auth_methods_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of Client Authentication methods supported by this Token Endpoint.",
                      "enum": [
                        "private_key_jwt"
                      ]
                    },
                    "display_values_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of the display parameter values that the OpenID Provider supports."
                    },
                    "claim_types_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of the Claim Types that the OpenID Provider supports.",
                      "enum": [
                        "normal",
                        "aggregated",
                        "distributed"
                      ]
                    },
                    "claims_supported": {
                      "type": "string",
                      "description": "JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for."
                    },
                    "claims_locales_supported": {
                      "type": "string",
                      "description": "Languages and scripts supported for values in Claims being returned."
                    },
                    "ui_locales_supported": {
                      "type": "string",
                      "description": "Languages and scripts supported for the user interface."
                    }
                  },
                  "required": [
                    "issuer",
                    "authorization_endpoint",
                    "token_endpoint",
                    "jwks_uri",
                    "registration_endpoint",
                    "scopes_supported",
                    "response_types_supported"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-.well-known-openid-configuration",
        "description": "NOTE : Endpoint Under discussion\n\nReference : https://openid.net/specs/openid-connect-discovery-1_0.html\n\nTODO - https://www.rfc-editor.org/rfc/rfc5646.html"
      },
      "parameters": []
    },
    "/.well-known/jwks.json": {
      "get": {
        "summary": "JSON Web Key Set Endpoint",
        "tags": [
          "OIDC"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kid": {
                            "type": "string",
                            "description": "The certificate's Key ID"
                          },
                          "alg": {
                            "type": "string",
                            "description": "The algorithm used with the Key. Valid value: RS256",
                            "enum": [
                              "RS256"
                            ]
                          },
                          "use": {
                            "type": "string",
                            "description": "How the Key is used. Valid value: sig",
                            "enum": [
                              "sig"
                            ]
                          },
                          "kty": {
                            "type": "string",
                            "description": "Cryptographic algorithm family for the certificate's Key pair. Valid value: RSA",
                            "enum": [
                              "RSA"
                            ]
                          },
                          "e": {
                            "type": "string",
                            "description": "RSA Key value (exponent) for Key blinding"
                          },
                          "n": {
                            "type": "string",
                            "description": "RSA modulus value"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "ACTIVE",
                              "EXPIRED",
                              "NEXT"
                            ],
                            "description": "ACTIVE Key is used to sign tokens issued by the Idp server.\nNEXT Key is the next Key that the IdP Server uses to sign tokens when Keys are rotated. The NEXT Key might not be listed if it hasn't been generated yet.\nEXPIRED Key is the previous Key that the IdP Server used to sign tokens. The EXPIRED Key might not be listed if no Key has expired or the expired Key has been deleted."
                          },
                          "x5c": {
                            "type": "string",
                            "description": "Certificate to validate the Oauth server trust."
                          }
                        },
                        "required": [
                          "kid",
                          "alg",
                          "use",
                          "kty",
                          "e",
                          "n"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-certs",
        "description": "NOTE : Endpoint Under discussion\n\nEndpoint to fetch all the public keys of the IdP server.Returns public key set in the JWKS format."
      },
      "parameters": []
    },
    "/introspect": {
      "get": {
        "summary": "Introspect Endpoint",
        "tags": [
          "OIDC"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-introspect",
        "description": "NOTE : Endpoint Under discussion\n\nThis endpoint takes an access token or ID token and returns a boolean that indicates whether it is active. If the token is active, additional data about the token is also returned. If the token is invalid, expired, or revoked, it is considered inactive.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "client_id",
            "description": "OIDC client Id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "token",
            "description": "An access token or ID token",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "access_token",
                "id_token"
              ]
            },
            "in": "query",
            "name": "token_type_hint",
            "description": "Indicates the type of token being passed. Valid values: access_token, id_token",
            "required": true
          }
        ]
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "title": "Error",
        "x-stoplight": {
          "id": "et1b1aqs2g0r3"
        },
        "type": "object",
        "description": "Any server-side errors are returned in this error object.",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "Predefined error codes."
          },
          "errorMessage": {
            "type": "string",
            "description": "Descriptive error message.\n"
          }
        },
        "required": [
          "errorCode",
          "errorMessage"
        ]
      },
      "Claim": {
        "title": "Claim",
        "x-stoplight": {
          "id": "z7c32949w8qet"
        },
        "type": "object",
        "description": "The userinfo and id_token members of the claims request both are JSON object. if null, Indicates that this Claim is being requested as Voluntary Claim.\n\nNote: Unknown claim names either in userinfo or id_token are ignored.\n",
        "properties": {
          "userinfo": {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "given_name": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "email": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "gender": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "birthdate": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "phone_number": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "profile_photo": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "address": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "locale": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "individual_id": {
                "$ref": "#/components/schemas/ClaimDetail"
              }
            }
          },
          "id_token": {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/ClaimDetail"
              },
              "acrs": {
                "$ref": "#/components/schemas/ClaimDetail"
              }
            }
          },
          "locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ClaimDetail": {
        "title": "ClaimDetail",
        "x-stoplight": {
          "id": "kypheo15jidj9"
        },
        "type": "object",
        "properties": {
          "essential": {
            "type": "boolean",
            "description": "Indicates whether the Claim being requested is an Essential Claim. If the value is true, this indicates that the Claim is an Essential Claim. The default is false.\n"
          },
          "value": {
            "type": "string",
            "description": "Requests that the Claim be returned with a particular value. For instance the Claim request.\n\n\"sub\": {\"value\": \"248289761001\"} can be used to specify that the request apply to the End-User with Subject Identifier 248289761001."
          },
          "values": {
            "type": "array",
            "description": "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuthChallenge": {
        "title": "AuthChallenge",
        "x-stoplight": {
          "id": "n3fy2qkg9r7h2"
        },
        "type": "object",
        "description": "Model to take any type of challenge from the enduser as part of authenticate request.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the type of auth challenge. It should be same as authfactor.type (oauth-details response).",
            "enum": [
              "otp",
              "pin",
              "face",
              "iris",
              "finger"
            ]
          },
          "challenge": {
            "type": "string",
            "description": "Actual challenge as string."
          }
        },
        "required": [
          "type",
          "challenge"
        ]
      },
      "AuthFactor": {
        "title": "AuthFactor",
        "x-stoplight": {
          "id": "m6lnp87wondln"
        },
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Name of the authentication method",
            "enum": [
              "otp",
              "pin",
              "pwd",
              "face",
              "iris",
              "finger"
            ]
          },
          "count": {
            "type": "string",
            "description": "Applicable for biometric based authentication, number of bio segments to be captured for authentication."
          },
          "bioSubTypes": {
            "type": "array",
            "description": "Applicable for biometric based authentication. Can be mmore specific about which bio segments should be captured.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type"
        ]
      }
    }
  }
}
